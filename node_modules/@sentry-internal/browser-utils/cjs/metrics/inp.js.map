{"version":3,"file":"inp.js","sources":["../../../src/metrics/inp.ts"],"sourcesContent":["import {\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getRootSpan,\n  spanToJSON,\n  startInactiveSpan,\n} from '@sentry/core';\nimport type { Integration, SpanAttributes } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, dropUndefinedKeys, htmlTreeAsString } from '@sentry/utils';\nimport {\n  addInpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n  isPerformanceEventTiming,\n} from './instrument';\nimport { getBrowserPerformanceAPI, msToSec } from './utils';\n\n// We only care about name here\ninterface PartialRouteInfo {\n  name: string | undefined;\n}\n\nconst LAST_INTERACTIONS: number[] = [];\nconst INTERACTIONS_ROUTE_MAP = new Map<number, string>();\n\n/**\n * Start tracking INP webvital events.\n */\nexport function startTrackingINP(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin) {\n    const inpCallback = _trackINP();\n\n    return (): void => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\nconst INP_ENTRY_MAP: Record<string, 'click' | 'hover' | 'drag' | 'press'> = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. */\nfunction _trackINP(): () => void {\n  return addInpInstrumentationHandler(({ metric }) => {\n    const client = getClient();\n    if (!client || metric.value == undefined) {\n      return;\n    }\n\n    const entry = metric.entries.find(entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name]);\n\n    if (!entry) {\n      return;\n    }\n\n    const { interactionId } = entry;\n    const interactionType = INP_ENTRY_MAP[entry.name];\n\n    const options = client.getOptions();\n    /** Build the INP span, create an envelope from the span, and then send the envelope */\n    const startTime = msToSec((browserPerformanceTimeOrigin as number) + entry.startTime);\n    const duration = msToSec(metric.value);\n    const scope = getCurrentScope();\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n    // We first try to lookup the route name from our INTERACTIONS_ROUTE_MAP,\n    // where we cache the route per interactionId\n    const cachedRouteName = interactionId != null ? INTERACTIONS_ROUTE_MAP.get(interactionId) : undefined;\n\n    // Else, we try to use the active span.\n    // Finally, we fall back to look at the transactionName on the scope\n    const routeName =\n      cachedRouteName || (rootSpan ? spanToJSON(rootSpan).description : scope.getScopeData().transactionName);\n\n    const user = scope.getUser();\n\n    // We need to get the replay, user, and activeTransaction from the current scope\n    // so that we can associate replay id, profile id, and a user display to the span\n    const replay = client.getIntegrationByName<Integration & { getReplayId: () => string }>('Replay');\n\n    const replayId = replay && replay.getReplayId();\n\n    const userDisplay = user !== undefined ? user.email || user.id || user.ip_address : undefined;\n    let profileId: string | undefined = undefined;\n    try {\n      // @ts-expect-error skip optional chaining to save bundle size with try catch\n      profileId = scope.getScopeData().contexts.profile.profile_id;\n    } catch {\n      // do nothing\n    }\n\n    const name = htmlTreeAsString(entry.target);\n    const attributes: SpanAttributes = dropUndefinedKeys({\n      release: options.release,\n      environment: options.environment,\n      transaction: routeName,\n      [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: metric.value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.inp',\n      user: userDisplay || undefined,\n      profile_id: profileId || undefined,\n      replay_id: replayId || undefined,\n    });\n\n    const span = startInactiveSpan({\n      name,\n      op: `ui.interaction.${interactionType}`,\n      attributes,\n      startTime: startTime,\n      experimental: {\n        standalone: true,\n      },\n    });\n\n    span.addEvent('inp', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: metric.value,\n    });\n\n    span.end(startTime + duration);\n  });\n}\n\n/** Register a listener to cache route information for INP interactions. */\nexport function registerInpInteractionListener(latestRoute: PartialRouteInfo): void {\n  const handleEntries = ({ entries }: { entries: PerformanceEntry[] }): void => {\n    entries.forEach(entry => {\n      if (!isPerformanceEventTiming(entry) || !latestRoute.name) {\n        return;\n      }\n\n      const interactionId = entry.interactionId;\n      if (interactionId == null) {\n        return;\n      }\n\n      // If the interaction was already recorded before, nothing more to do\n      if (INTERACTIONS_ROUTE_MAP.has(interactionId)) {\n        return;\n      }\n\n      // We keep max. 10 interactions in the list, then remove the oldest one & clean up\n      if (LAST_INTERACTIONS.length > 10) {\n        const last = LAST_INTERACTIONS.shift() as number;\n        INTERACTIONS_ROUTE_MAP.delete(last);\n      }\n\n      // We add the interaction to the list of recorded interactions\n      // and store the route information for this interaction\n      // (we clone the object because it is mutated when it changes)\n      LAST_INTERACTIONS.push(interactionId);\n      INTERACTIONS_ROUTE_MAP.set(interactionId, latestRoute.name);\n    });\n  };\n\n  addPerformanceInstrumentationHandler('event', handleEntries);\n  addPerformanceInstrumentationHandler('first-input', handleEntries);\n}\n"],"names":["getBrowserPerformanceAPI","browserPerformanceTimeOrigin","addInpInstrumentationHandler","getClient","msToSec","getCurrentScope","getActiveSpan","getRootSpan","spanToJSON","htmlTreeAsString","dropUndefinedKeys","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","startInactiveSpan","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","isPerformanceEventTiming","addPerformanceInstrumentationHandler"],"mappings":"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"}